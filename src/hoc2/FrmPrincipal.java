/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hoc2;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.*;

/**
 *
 * @author argio
 */
public class FrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLexic = new javax.swing.JButton();
        btnSintact = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAnalizar = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaTokens = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAreaSintact = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnLexic.setText("Analizar Léxicamente");
        btnLexic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLexicActionPerformed(evt);
            }
        });

        btnSintact.setText("Analizar Sintácticamente");
        btnSintact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSintactActionPerformed(evt);
            }
        });

        txtAnalizar.setColumns(20);
        txtAnalizar.setFont(new java.awt.Font("Lucida Console", 0, 15)); // NOI18N
        txtAnalizar.setRows(5);
        jScrollPane1.setViewportView(txtAnalizar);

        txtAreaTokens.setColumns(20);
        txtAreaTokens.setRows(5);
        jScrollPane2.setViewportView(txtAreaTokens);

        txtAreaSintact.setColumns(20);
        txtAreaSintact.setRows(5);
        jScrollPane3.setViewportView(txtAreaSintact);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLexic)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSintact)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLexic)
                    .addComponent(btnSintact))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLexicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLexicActionPerformed
        // TODO add your handling code here:
        Symbol simb;
        String Lexema = new String();
        String CadAux = new String();
        File ArchEntrada = new File("ArchEntrada.txt");
        PrintWriter escribir;
        this.txtAreaTokens.setText("");
        this.txtAreaSintact.setText("");
        try{
            escribir = new PrintWriter(ArchEntrada);
            escribir.print(this.txtAnalizar.getText());
            escribir.close();
        }catch(FileNotFoundException ex){
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE,null, ex);
        }
        try{
            Reader lector;
            lector = new BufferedReader(new FileReader("ArchEntrada.txt"));
            
            AnalizadorLexico AnalizLexico = new AnalizadorLexico(lector);
            do{
                simb = AnalizLexico.next_token();
                CadAux = Integer.toString(simb.sym);
                Lexema = AnalizLexico.yytext();
                if(simb.sym == AnalizadorSintacticoSym.EOF)
                    CadAux = "Token: "+CadAux+ "\tIdentTOKEN: FIN\n";
                else
                    switch(simb.sym){
                        case AnalizadorSintacticoSym.Enter:
                            CadAux = "Token: "+CadAux+ "\tIdentTOKEN: Enter\t Lexema:" +Lexema;
                            break;
                        case AnalizadorSintacticoSym.NUM:
                            CadAux = "Token: "+CadAux+ "\tIdentTOKEN: NUM\t Lexema:" +Lexema+"\n";
                            break;
                         case AnalizadorSintacticoSym.OpAsig:
                            CadAux = "Token: "+CadAux+ "\tIdentTOKEN: OpAsig\t Lexema:" +Lexema+"\n";
                            break;
                        case AnalizadorSintacticoSym.OpSuma:
                            CadAux = "Token: "+CadAux+ "\tIdentTOKEN: OpSuma\t Lexema:" +Lexema+"\n";
                            break;
                        case AnalizadorSintacticoSym.OpResta:
                            CadAux = "Token: "+CadAux+ "\tIdentTOKEN: OpResta\t Lexema:" +Lexema+"\n";
                            break;
                        case AnalizadorSintacticoSym.OpProd:
                            CadAux = "Token: "+CadAux+ "\tIdentTOKEN: OpProd\t Lexema:" +Lexema+"\n";
                            break;
                        case AnalizadorSintacticoSym.OpDiv:
                            CadAux = "Token: "+CadAux+ "\tIdentTOKEN: OpDiv\t Lexema:" +Lexema+"\n";
                            break;
                        case AnalizadorSintacticoSym.ParIzq:
                            CadAux = "Token: "+CadAux+ "\tIdentTOKEN: ParIzq\t Lexema:" +Lexema+"\n";
                            break;
                        case AnalizadorSintacticoSym.ParDer:
                            CadAux = "Token: "+CadAux+ "\tIdentTOKEN: ParDer\t Lexema:" +Lexema+"\n";
                            break;
                        case AnalizadorSintacticoSym.error:
                            CadAux = "Token: "+CadAux+ "\tIdentTOKEN: ERROR\t Lexema:" +Lexema+"\n";
                            break;
                        case AnalizadorSintacticoSym.VAR:
                            CadAux = "Token: "+CadAux+ "\tIdentTOKEN: VAR\t Lexema:" +Lexema+ " indice=" +Integer.toString((Integer) simb.value)+"\n";
                            break;
                        default:
                            CadAux = "Token: "+CadAux+ "\tIndentTOKEN: OTRO\t Lexema:" +AnalizLexico.yytext()+"\n";
                       
                    }
                this.txtAreaTokens.append(CadAux);
            }while(simb.sym != AnalizadorSintacticoSym.EOF);
        }catch(IOException ex){
            this.txtAreaTokens.append("Entro al catch\n");
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE,null, ex);
        }
    }//GEN-LAST:event_btnLexicActionPerformed

    private void btnSintactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSintactActionPerformed
        // TODO add your handling code here:
        this.txtAreaSintact.setText("");
        try{
            AnalizadorSintactico Sintac = new AnalizadorSintactico(
                new AnalizadorLexico(new FileReader("ArchEntrada.txt")));
            Sintac.frmInterfaz = this;
            Object res = Sintac.parse().value;
            this.txtAreaSintact.append("\n FIN DEL ANÁLISIS SINTÁCTICO ");

        }catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSintactActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        FrmPrincipal frmInterfaz = new FrmPrincipal();
        frmInterfaz.setVisible(true);
                
        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new FrmPrincipal().setVisible(true);
//            }
//        });
    }
    
    public void PonerTextSintac(String texto){
        this.txtAreaSintact.append(texto);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLexic;
    private javax.swing.JButton btnSintact;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtAnalizar;
    private javax.swing.JTextArea txtAreaSintact;
    private javax.swing.JTextArea txtAreaTokens;
    // End of variables declaration//GEN-END:variables
}
